import{_ as a,o as e,c as r,R as t}from"./chunks/framework.NcfuTIUp.js";const b=JSON.parse('{"title":"货币","description":"","frontmatter":{},"headers":[],"relativePath":"currency/overview.md","filePath":"currency/overview.md"}'),o={name:"currency/overview.md"},i=t('<h1 id="货币" tabindex="-1">货币 <a class="header-anchor" href="#货币" aria-label="Permalink to &quot;货币&quot;">​</a></h1><h2 id="一、基础信息简介" tabindex="-1">一、基础信息简介 <a class="header-anchor" href="#一、基础信息简介" aria-label="Permalink to &quot;一、基础信息简介&quot;">​</a></h2><h3 id="货币三要素" tabindex="-1">货币三要素 <a class="header-anchor" href="#货币三要素" aria-label="Permalink to &quot;货币三要素&quot;">​</a></h3><ul><li><strong>货币币种</strong>：使用的货币类型，如“CNY”（人民币）、“USD”（美元）</li><li><strong>货币金额</strong> ：在某币种下，表示货币数量用到的货币数字，如“CNY 100”中的“100”</li><li><strong>货币单位</strong>：比如使用人民币，单位使用元还是分 <ul><li>基准单位：最常用的单位，一般是当地的元</li><li>最小单位：一般是当地的分，但有些国家可能没有分（比如日元）</li></ul></li></ul><h3 id="货币问题分类" tabindex="-1">货币问题分类 <a class="header-anchor" href="#货币问题分类" aria-label="Permalink to &quot;货币问题分类&quot;">​</a></h3><ul><li>货币信息： <ul><li>币种：一个地区使用的货币币种是什么？用美元还是人民币</li><li>精度：美元金额要保留2位小数还是取整？</li><li>汇率：美元转人民币的汇率是多少？</li></ul></li><li>货币展示： <ul><li>货币符号：美元的货币符号是“US”还是“$”? 人民币的货币符号是“￥”还是“元”？</li><li>数字表示：“$1.000” 表示1000美元还是1美元？</li><li>符号位置：到底应该是“$ 1.00” 还是 “1.00 $”？</li></ul></li></ul><h2 id="二、国际标准" tabindex="-1">二、国际标准 <a class="header-anchor" href="#二、国际标准" aria-label="Permalink to &quot;二、国际标准&quot;">​</a></h2><h3 id="_1-iso-4217-三字母货币码" tabindex="-1">1. <strong>ISO 4217 三字母货币码</strong> <a class="header-anchor" href="#_1-iso-4217-三字母货币码" aria-label="Permalink to &quot;1. **ISO 4217 三字母货币码**&quot;">​</a></h3><p>ISO4217 定义了三个字母的货币代码，例如 USD 表示美元。此标准还定义了每个货币的小数点位置和格式等信息。</p><p><a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" rel="noreferrer">ISO 4217的官方链接</a><a href="https://zh.wikipedia.org/zh-hans/ISO_4217" target="_blank" rel="noreferrer">维基百科链接</a></p><h3 id="_2-iso-10916-货币金额表示法" tabindex="-1">2. ISO 10916 货币金额表示法 <a class="header-anchor" href="#_2-iso-10916-货币金额表示法" aria-label="Permalink to &quot;2. ISO 10916 货币金额表示法&quot;">​</a></h3><p>这是一份国际标准，规定了货币金额表示法的基本原则，包括货币符号、金额表示方式、货币小数点分隔符等。</p><p><a href="https://www.iso.org/standard/57248.html" target="_blank" rel="noreferrer">ISO 10916的官方链接</a></p><h2 id="三、最佳实践" tabindex="-1">三、最佳实践 <a class="header-anchor" href="#三、最佳实践" aria-label="Permalink to &quot;三、最佳实践&quot;">​</a></h2><p>货币处理5阶段</p><h3 id="_1-货币生成" tabindex="-1">1.货币生成 <a class="header-anchor" href="#_1-货币生成" aria-label="Permalink to &quot;1.货币生成&quot;">​</a></h3><p>（1）用户录入货币信息时，货币单位一般使用基准单位（元），金额保留2位小数（如有小数）。</p><p>（2）服务直接生成货币信息时，抹零取整需在数据生产源头完成。</p><ul><li>解释：货币金额在展现和存储上要一致（价值上等价），数据及派生数据的源头做统一的精度、取整、抹零处理后，再存储、展现或传递到下游，以保证数据的全局一致性。 如“取消费”由服务管控产生，必须由服务管控做取整抹零处理，其他使用方直接使用即可。</li></ul><h3 id="_2-货币传输" tabindex="-1">2. 货币传输 <a class="header-anchor" href="#_2-货币传输" aria-label="Permalink to &quot;2. 货币传输&quot;">​</a></h3><p>货币传输 需明确币种、金额、单位三要素。一般单位使用最小单位，金额使用64位有符号整数。</p><ul><li><p>解释：使用最小单位，可以让金额保证是整数。</p><p>32位整数可能整数溢出，浮点数可能有精度损失。</p></li></ul><h3 id="_3-货币计算" tabindex="-1">3. 货币计算 <a class="header-anchor" href="#_3-货币计算" aria-label="Permalink to &quot;3. 货币计算&quot;">​</a></h3><p>（1）货币计算 需明确币种、金额、单位三要素。单位一般使用最小单位，金额使用64位有符号整数。</p><p>（2）分账时若使用除法，注意可能无法整除，此时需使用减法确保账平。</p><p>（3）限额不要写死，要做配置化，大小根据汇率来调配</p><ul><li><p>解释：比如最大优惠券额度不能超过100元。如果代码中写死，由于有些币种非常不值钱，会导致所有优惠券都不可用。因此：</p><p>a. 限额要做成可配置的，具体限额值应将可接受的人民币金额按汇率折算成当地货币金额 b. 限额可用来防止极端输入下的大额资损及计算溢出</p></li></ul><p>（4）货币金额变量名建议使用分段命名</p><ul><li>解释：货币数据在变量命名时，必须采用分段命名方式提高可读性。 包含核心含义（该名字的用途等）、数值类型（string、int64等）、货币单位（fen、yuan）等， 如“display_amount_string_yuan”，&quot;total_fee_int64_fen&quot;</li></ul><h3 id="_4-货币存储" tabindex="-1">4. 货币存储 <a class="header-anchor" href="#_4-货币存储" aria-label="Permalink to &quot;4. 货币存储&quot;">​</a></h3><p>（1）货币存储 需明确币种、金额、单位三要素。币种可用国家或地区或币种来表示，单位一般使用最小单位，金额使用64位有符号整数。</p><ul><li>解释： 币种保存 国家码也可，是因为 由国家码可以推出货币币种</li></ul><h3 id="_5-货币展示" tabindex="-1">5. 货币展示 <a class="header-anchor" href="#_5-货币展示" aria-label="Permalink to &quot;5. 货币展示&quot;">​</a></h3><p>（1）货币文案建议由后端服务下发</p><ul><li>解释：服务端生成文案更收敛（服务端一份数据会在多个终端展现）和更可控（如能快速升级止损）</li></ul><p>（2）货币展示由统一SDK进行格式化，确保扩展性、正确性、一致性。比如可使用ICU。</p><ul><li>解释：不同国家货币符号、数字样式等都不相同，每个业务如果都自己实现，每开个国家所有业务都需开发，成本高且不收敛。</li></ul><h2 id="四、工具集合" tabindex="-1">四、工具集合 <a class="header-anchor" href="#四、工具集合" aria-label="Permalink to &quot;四、工具集合&quot;">​</a></h2><h3 id="_1-汇率工具" tabindex="-1">1. 汇率工具 <a class="header-anchor" href="#_1-汇率工具" aria-label="Permalink to &quot;1. 汇率工具&quot;">​</a></h3><table><thead><tr><th>站点链接</th><th>特性</th></tr></thead><tbody><tr><td><a href="https://fixer.io/documentation" target="_blank" rel="noreferrer">https://fixer.io/documentation</a></td><td>小时更新, eur基准</td></tr><tr><td><a href="https://currencylayer.com/documentation" target="_blank" rel="noreferrer">https://currencylayer.com/documentation</a></td><td>每日更新、usd基准</td></tr><tr><td><a href="https://docs.openexchangerates.org/reference/api-introduction" target="_blank" rel="noreferrer">https://docs.openexchangerates.org/reference/api-introduction</a></td><td>小时更新、usd为基准</td></tr></tbody></table><h2 id="五、知名开源项目" tabindex="-1">五、知名开源项目 <a class="header-anchor" href="#五、知名开源项目" aria-label="Permalink to &quot;五、知名开源项目&quot;">​</a></h2><h3 id="icu" tabindex="-1">ICU <a class="header-anchor" href="#icu" aria-label="Permalink to &quot;ICU&quot;">​</a></h3><p>介绍</p><ul><li><a href="https://unicode-org.github.io/icu/" target="_blank" rel="noreferrer">ICU</a> international components for unicode，国际化unicode组件库。ICU是一个开源的C/C++、java类库，提供unicode和全球化支持。它是跨平台的，在所有平台都可以给出相同的结果。</li></ul><p><a href="https://unicode-org.github.io/icu/" target="_blank" rel="noreferrer">icu文档</a></p><p><a href="https://github.com/unicode-org/icu" target="_blank" rel="noreferrer">icu的github</a></p><p><a href="https://github.com/unicode-org/icu-data" target="_blank" rel="noreferrer">icu的数据</a></p><h3 id="icu4x" tabindex="-1">icu4x <a class="header-anchor" href="#icu4x" aria-label="Permalink to &quot;icu4x&quot;">​</a></h3><ul><li><a href="https://github.com/unicode-org/icu4x" target="_blank" rel="noreferrer">icu4x</a> - CU4X提供了支持广泛软件国际化的组件。它深刻借鉴了ICU4C、ICU4J和ECMA-402的经验，并依赖于CLDR项目的数据。</li></ul><h3 id="golang-org-x-text" tabindex="-1"><a href="http://golang.org/x/text" target="_blank" rel="noreferrer">golang.org/x/text</a> <a class="header-anchor" href="#golang-org-x-text" aria-label="Permalink to &quot;[golang.org/x/text](http://golang.org/x/text)&quot;">​</a></h3><p>github地址： <a href="https://github.com/golang/text/" target="_blank" rel="noreferrer">https://github.com/golang/text/</a></p><p>golang.org/x/text是Go语言的一个子项目，它提供了文本处理的相关功能。它包含了很多有用的子包，可以用于本地化、字符集转换、文本处理与格式化、数字格式化、货币处理等。</p>',52),l=[i];function n(h,u,c,d,s,p){return e(),r("div",null,l)}const _=a(o,[["render",n]]);export{b as __pageData,_ as default};
